public class Tree {

private String data;
private Node left;
private Node right;

public Tree(String input) {
this.data = input;
this.left = null;
this.right = null;
}
// As a convention, if the key to be inserted is less than the key of root node, then key is inserted in
// left sub-tree; If key is greater, it is inserted in right sub-tree. If it is equal, as a convention, it
// is inserted in right sub-tree
public void addNode(String input) {
  if (input < this.data) {
    if (this.left != null) {
      this.left.addNode(input);
    }
    else {
      this.left = new BinaryTree(input);
    }
  }
  else {
    if (this.right != null) {
    this.right.addNode(input);
    }
    else {
    this.right = new BinaryTree(input);
    }
  }
}
// Visit the node first, then left and right sub-trees
public void traversePreOrder() {
System.out.println( this.data );
if( this.left != null ) {
this.left.traversePreOrder();
}
if( this.right != null ) {
this.right.traversePreOrder();
}
}
// Visit left sub-tree, then node and then, right sub-tree
public void traverseInOrder() {
if( this.left != null ) {
this.left.traverseInOrder();
}
System.out.println( this.data );
if( this.right != null ) {
this.right.traverseInOrder();
}
}
// Visit left sub-tree, then right sub-tree and then the node
public void traversePostOrder() {
if( this.left != null ) {
this.left.traversePostOrder();
}
if( this.right != null ) {
this.right.traversePostOrder();
}
System.out.println( this.data );
}

}
